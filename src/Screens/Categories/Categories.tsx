import { Loading } from '@/components/Loading'
import TapMotion from '@/components/TapMotion'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { PopupAlertType, usePopupAlertContext } from '@/context/PopupAlertContext'
import { delete_category_f, edit_category_f, get_categories_f } from '@/lib/api'
import transitions from '@/lib/transition'
import { CheckIcon, PencilIcon, PlusIcon, Trash2Icon, TrashIcon } from 'lucide-react'
import { useEffect, useRef, useState } from 'react'

// Generated by https://quicktype.io

export interface Category {
  id: number
  image: string
  title: string
  created_at: string
  updated_at: string
}
function Categories() {
  const [categories, setCategories] = useState<Category[] | null>(null)

  async function loadAllCategories() {
    setCategories(null)
    const res = await get_categories_f()
    if (res.status) setCategories(res.data.data)
    console.log(res.data.data)
  }

  useEffect(() => {
    loadAllCategories()
  }, [])

  return (
    <div>
      <p className='mb-5 text-2xl font-bold'>Categories</p>
      <Button>
        <PlusIcon className='mr-2' />
        New Category
      </Button>
      <div className='mt-5 flex w-full flex-wrap gap-5 xl:grid-cols-2'>
        {categories?.map((category) => <Category key={category.id} category={category} />)}
      </div>
    </div>
  )
}

async function deleteCategory(category: Category, newPopup: (popup: PopupAlertType) => void) {
  transitions(() =>
    newPopup({
      title: 'Delete Category',
      subTitle: 'Are you sure you want to delete this category?',
      action: [
        {
          text: <span className='text-red-500'>Delete</span>,
          onClick: async () => {
            setTimeout(async () => {
              newPopup({
                title: (
                  <span className='flex'>
                    <Loading />
                    Deleting Category
                  </span>
                ),
                subTitle: 'Please wait while we delete your category',
                action: [],
              })

              const res = await delete_category_f(category.id)
              if (res.status) {
                newPopup({
                  title: 'Category Deleted',
                  subTitle: 'Your category has been deleted successfully',
                })
              } else {
                newPopup({
                  title: 'Error',
                  subTitle: 'Something went wrong while deleting your category',
                })
              }
            }, 100)
          },
        },
        { text: <span className='text-green-500'>Cancel</span> },
      ],
    }),
  )()
}

export default function Category({ category }: { category: Category }) {
  const [edit, setEdit] = useState(false)
  const [title, setTitle] = useState(category.title)
  const [isLoading, setIsLoading] = useState(false)

  const { newPopup } = usePopupAlertContext()

  async function updateCategory() {
    setIsLoading(true)
    const res = await edit_category_f(category.id, title)
    if (res.status) setEdit(false)
    else setTitle(category.title)
    setIsLoading(false)
  }

  return (
    <div className='halka-bg flex w-full max-w-sm items-center rounded-xl p-3'>
      <img className='mr-5 h-16 w-16 rounded-lg' src={category.image} alt={title} />
      <div className='fap5 flex w-full justify-between gap-4'>
        {edit ? (
          <input
            className='halka-bg w-full border border-transparent border-b-red-500 bg-transparent px-2 outline-none'
            placeholder='Category Name'
            autoFocus
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
        ) : (
          <p className='line-clamp-1 text-lg font-medium'>{title}</p>
        )}
        <div className='flex flex-row gap-3'>
          {edit ? (
            isLoading ? (
              <div className='tap99 rounded-full py-2.5'>
                <Loading />
              </div>
            ) : (
              <TapMotion
                size='md'
                className='tap99 rounded-full bg-green-500/20 p-2.5 text-green-500'
                onClick={updateCategory}
              >
                <CheckIcon className='h-4 w-4' strokeWidth={3} />
              </TapMotion>
            )
          ) : (
            <>
              <TapMotion
                size='md'
                className='tap99 rounded-full bg-green-500/20 p-2.5 text-green-500'
                onClick={() => setEdit(true)}
              >
                <PencilIcon className='h-4 w-4' />
              </TapMotion>

              <TapMotion
                size='md'
                className='tap99 rounded-full bg-red-500/20 p-2.5 text-red-500'
                onClick={() => deleteCategory(category, newPopup)}
              >
                <Trash2Icon className='h-4 w-4' />
              </TapMotion>
            </>
          )}
        </div>
      </div>
    </div>
  )
}

function AddNewBanner({ loadBanners }: { loadBanners: () => void }) {
  const { newPopup } = usePopupAlertContext()
  const pp = useRef<HTMLInputElement>(null)
  const onChangeFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const fileInput = e.target.files
    const ppValidation = profilePicFileValidation(pp.current!.files![0])
    if (ppValidation.error) {
      newPopup({ title: 'Invalid File', subTitle: ppValidation.message })
      pp.current!.value = ''
      return
    }
    addNewBannerFn(fileInput, pp, newPopup, loadBanners)
  }, [])
  return (
    <div
      className='tap99 flex aspect-[2/1] h-full w-full cursor-pointer items-center justify-center'
      onClick={() => {
        pp.current!.click()
      }}
    >
      <input
        type='file'
        className='hidden'
        ref={pp}
        onChange={onChangeFileSelect}
        accept='image/png, image/jpeg, image/jpg'
      />
      <div className='halka-bg group relative flex h-full w-full items-center justify-center rounded-2xl p-5'>
        <PlusIcon className='h-10 w-10 text-gray-400' />
      </div>
    </div>
  )
}

function addNewBannerFn(
  fileInput: FileList | null,
  pp: RefObject<HTMLInputElement>,
  newPopup: (popup: PopupAlertType) => void,
  loadBanners: () => void,
) {
  transitions(() => {
    newPopup({
      title: 'Upload This Banner?',
      subTitle: (
        <div className='w-full'>
          <img
            src={URL.createObjectURL(fileInput![0])}
            alt=''
            className='aspect-[2/1] w-full rounded-2xl object-cover'
          />
          <p className='mt-3'>Are you sure you want to upload this banner?</p>
        </div>
      ),
      action: [
        {
          text: 'Cancel',
          onClick: () => {
            pp.current!.value = ''
          },
        },
        {
          text: <span className='text-green-500'>Upload</span>,
          onClick: async () => {
            setTimeout(() => {
              transitions(() =>
                newPopup({
                  title: (
                    <div className='flex'>
                      <Loading /> Please Wait
                    </div>
                  ),
                  subTitle: (
                    <div>
                      <img
                        src={URL.createObjectURL(fileInput![0])}
                        alt=''
                        className='aspect-[2/1] w-full rounded-2xl object-cover'
                      />
                      <p className='mt-3'>
                        Banner is being uploaded. Please do not close the app or refresh the page. This may take a few
                        seconds.
                      </p>
                    </div>
                  ),
                  action: [],
                }),
              )()
            }, 500)
            const body = new FormData()
            body.append('banner_image', fileInput![0])
            const res = await create_banner_f(body)
            console.log(res)
            if (!res.status) return transitions(() => newPopup({ title: 'Error', subTitle: res.message }))()
            transitions(() =>
              newPopup({
                title: 'Banner Uploaded',
                subTitle: res.message,
              }),
            )()
            loadBanners()
          },
        },
      ],
    })
  })()
}
